name: Move Issue to IN_PROGRESS on Branch Creation

on:
  create:

jobs:
  update_issue_status:
    runs-on: ubuntu-latest
    steps:
      - name: Extract Issue Number from Branch Name
        id: extract_issue
        run: |
          BRANCH_NAME="${{ github.ref_name }}"
          echo "üîç Branch Name: $BRANCH_NAME"

          ISSUE_NUMBER=$(echo "$BRANCH_NAME" | grep -oP '\d+' | head -n 1)
          if [ -z "$ISSUE_NUMBER" ]; then
            echo "üö® –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –Ω–æ–º–µ—Ä Issue –∏–∑ –∏–º–µ–Ω–∏ –≤–µ—Ç–∫–∏!"
            exit 1
          fi

          echo "‚úÖ –ò–∑–≤–ª–µ—á—ë–Ω ISSUE_NUMBER: $ISSUE_NUMBER"
          echo "ISSUE_NUMBER=$ISSUE_NUMBER" >> $GITHUB_ENV

      - name: Get Issue ID from Project
        id: get_issue_id
        run: |
          echo "üöÄ –ü–æ–ª—É—á–∞–µ–º ID Issue –∏–∑ GitHub Project..."
          
          RESPONSE=$(curl -s -X POST https://api.github.com/graphql \
            -H "Authorization: Bearer ${{ secrets.TOKEN_AUTOMATIZATION }}" \
            -H "Content-Type: application/json" \
            -d @- <<EOF
          {
            "query": "query {
              node(id: \"${{ secrets.ID_PROJECT_SKILLDOR }}\") {
                ... on ProjectV2 {
                  items(first: 100) {
                    nodes {
                      id
                      content { ... on Issue { number title url } }
                    }
                  }
                }
              }
            }"
          }
          EOF
          )

          echo "üîÑ –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç GitHub API:"
          echo "$RESPONSE" | jq .

          # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏ –≤ –æ—Ç–≤–µ—Ç–µ
          if echo "$RESPONSE" | jq -e '.errors' >/dev/null; then
            echo "üö® –û—à–∏–±–∫–∞: API –≤–µ—Ä–Ω—É–ª–æ –æ—à–∏–±–∫—É –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ Issue ID!"
            echo "status=error" >> $GITHUB_ENV
            exit 1
          fi

          ISSUE_ID=$(echo "$RESPONSE" | jq -r ".data.node.items.nodes[] | select(.content.number == $ISSUE_NUMBER) | .id")
          ISSUE_URL=$(echo "$RESPONSE" | jq -r ".data.node.items.nodes[] | select(.content.number == $ISSUE_NUMBER) | .content.url")

          # –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ URL –Ω–µ –ø—É—Å—Ç–æ–π
          echo "üîó –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ Issue: $ISSUE_URL"

          if [ -z "$ISSUE_ID" ] || [ "$ISSUE_ID" == "null" ]; then
            echo "üö® –û—à–∏–±–∫–∞: Issue —Å –Ω–æ–º–µ—Ä–æ–º ${ISSUE_NUMBER} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø—Ä–æ–µ–∫—Ç–µ!"
            echo "status=error" >> $GITHUB_ENV
            exit 1
          fi

          echo "‚úÖ –ù–∞–π–¥–µ–Ω ISSUE_ID: $ISSUE_ID"
          echo "ISSUE_URL=$ISSUE_URL"
          echo "ISSUE_ID=$ISSUE_ID" >> $GITHUB_ENV

      - name: Move Issue to IN_PROGRESS
        run: |
          echo "üöÄ –ü–µ—Ä–µ–º–µ—â–∞–µ–º Issue –≤ IN_PROGRESS..."

          RESPONSE=$(curl -s -X POST https://api.github.com/graphql \
            -H "Authorization: Bearer ${{ secrets.TOKEN_AUTOMATIZATION }}" \
            -H "Content-Type: application/json" \
            -d @- <<EOF
          {
            "query": "mutation {
              updateProjectV2ItemFieldValue(input: { 
                projectId: \"${{ secrets.ID_PROJECT_SKILLDOR }}\", 
                itemId: \"$ISSUE_ID\", 
                fieldId: \"${{ secrets.ID_COLUMN_STATUS_SKILLDOR }}\", 
                value: { singleSelectOptionId: \"${{ secrets.ID_COLUMN_STATUS_IN_PROGRESS_SKILLDOR }}\" }
              }) { clientMutationId }
            }"
          }
          EOF
          )

          echo "üîÑ API Response:"
          echo "$RESPONSE" | jq .

          # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏
          if echo "$RESPONSE" | jq -e '.errors' >/dev/null; then
            echo "üö® –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å Issue!"
            exit 1
          fi

          echo "‚úÖ Issue —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–º–µ—â—ë–Ω –≤ IN_PROGRESS!"

      - name: Send Telegram Notification
        if: success() || failure()
        run: |
          # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
          if [ "${{ job.status }}" == "success" ]; then
            MESSAGE="‚úÖ Issue —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–º–µ—â—ë–Ω –≤ —Å—Ç–∞—Ç—É—Å IN_PROGRESS.\n–ù–æ–º–µ—Ä Issue: $ISSUE_NUMBER\n–°—Å—ã–ª–∫–∞ –Ω–∞ Issue: $ISSUE_URL"
          else
            MESSAGE="üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ Issue –≤ —Å—Ç–∞—Ç—É—Å IN_PROGRESS.\n–ù–æ–º–µ—Ä Issue: $ISSUE_NUMBER\n–°—Å—ã–ª–∫–∞ –Ω–∞ Issue: $ISSUE_URL"
          fi

          # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
          curl -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -d "chat_id=${{ secrets.TELEGRAM_CHAT_ID }}" \
            -d "text=$MESSAGE"
