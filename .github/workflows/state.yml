name: Move Issue to IN_PROGRESS

on:
  create:

jobs:
  update_issue_status:
    runs-on: ubuntu-latest
    steps:
      - name: Extract Issue Number from Branch Name
        id: extract_issue
        run: |
          BRANCH_NAME="${{ github.ref_name }}"
          ISSUE_NUMBER=$(echo "$BRANCH_NAME" | grep -oP '\d+' | head -n 1)
          if [ -z "$ISSUE_NUMBER" ]; then
            echo "Error: Failed to extract issue number from branch name!"
            exit 1
          fi
          echo "ISSUE_NUMBER=$ISSUE_NUMBER" >> $GITHUB_ENV

      - name: Get Issue ID from Project
        id: get_issue_id
        run: |
          RESPONSE=$(curl -s -X POST https://api.github.com/graphql \
            -H "Authorization: Bearer ${{ secrets.TOKEN_AUTOMATIZATION }}" \
            -H "Content-Type: application/json" \
            -d @- <<EOF
          {
            "query": "query {
              node(id: \"${{ secrets.ID_PROJECT_SKILLDOR }}\") {
              ... on ProjectV2 {
              items(first: 100) {
                  nodes {
                      id
                      content { ... on Issue { number title url } }
                     }
                    }
                  }
                }
              }"
          }
          EOF
          )

          if echo "$RESPONSE" | jq -e '.errors' >/dev/null; then
            echo "Error: API returned an error when fetching issue ID!"
            exit 1
          fi

          ISSUE_ID=$(echo "$RESPONSE" | jq -r ".data.node.items.nodes[] | select(.content.number == $ISSUE_NUMBER) | .id")
          ISSUE_URL=$(echo "$RESPONSE" | jq -r ".data.node.items.nodes[] | select(.content.number == $ISSUE_NUMBER) | .content.url")

          if [ -z "$ISSUE_ID" ] || [ "$ISSUE_ID" == "null" ]; then
            echo "Error: Issue with number ${ISSUE_NUMBER} not found in project!"
            exit 1
          fi

          echo "ISSUE_ID=$ISSUE_ID" >> $GITHUB_ENV
          echo "ISSUE_URL=$ISSUE_URL" >> $GITHUB_ENV

      - name: Move Issue to IN_PROGRESS
        run: |
          RESPONSE=$(curl -s -X POST https://api.github.com/graphql \
            -H "Authorization: Bearer ${{ secrets.TOKEN_AUTOMATIZATION }}" \
            -H "Content-Type: application/json" \
            -d @- <<EOF
          {
            "query": "mutation {
              updateProjectV2ItemFieldValue(input: { 
              projectId: \"${{ secrets.ID_PROJECT_SKILLDOR }}\", 
              itemId: \"$ISSUE_ID\", 
              fieldId: \"${{ secrets.ID_COLUMN_STATUS_SKILLDOR }}\", 
              value: { singleSelectOptionId: \"${{ secrets.ID_COLUMN_STATUS_IN_PROGRESS_SKILLDOR }}\" }
                  }) { clientMutationId }
                }"
              }
          EOF
          )

          if echo "$RESPONSE" | jq -e '.errors' >/dev/null; then
            echo "Error: Failed to update issue status!"
            exit 1
          fi

      - name: Send Telegram Notification
        if: success() || failure()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            MESSAGE="âœ… *Issue successfully moved to IN_PROGRESS.*\n\nðŸ“Œ *Issue Number:* \`$ISSUE_NUMBER\`\nðŸ”— [Open Issue]($ISSUE_URL)"
          else
            MESSAGE="ðŸš¨ *Error moving issue to IN_PROGRESS!*\n\nðŸ“Œ *Issue Number:* \`$ISSUE_NUMBER\`\nðŸ”— [Open Issue]($ISSUE_URL)"
          fi

          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -H "Content-Type: application/json" \
            -d @- <<EOF
          {
            "chat_id": "${{ secrets.TELEGRAM_CHAT_ID }}",
            "text": "$MESSAGE",
            "parse_mode": "Markdown"
          }
          EOF
