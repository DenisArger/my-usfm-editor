name: Update Issue Status to REVIEW on PR Open

on:
  pull_request:
    types: [opened]

jobs:
  update-status:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up environment variables
        run: |
          echo "TOKEN_AUTOMATIZATION=${{ secrets.TOKEN_AUTOMATIZATION }}" >> $GITHUB_ENV
          echo "ID_PROJECT_SKILLDOR=${{ secrets.ID_PROJECT_SKILLDOR }}" >> $GITHUB_ENV
          echo "ID_COLUMN_STATUS_SKILLDOR=${{ secrets.ID_COLUMN_STATUS_SKILLDOR }}" >> $GITHUB_ENV
          echo "ID_COLUMN_STATUS_REVIEW_SKILLDOR=${{ secrets.ID_COLUMN_STATUS_REVIEW_SKILLDOR }}" >> $GITHUB_ENV

      - name: Update task status to REVIEW
        run: |
          set -euo pipefail

          LOG_FILE="pr_review.log"
          log() {
            echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" | tee -a "$LOG_FILE"
          }
          error_exit() {
            log "üö® –û—à–∏–±–∫–∞: $1"
            exit 1
          }

          log "==================== –ó–∞–ø—É—Å–∫ workflow –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ REVIEW ===================="

          # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –≤–µ—Ç–∫–∏ –∏–∑ —Å–æ–±—ã—Ç–∏—è PR (–≤–µ—Ç–∫–∞, —Å –∫–æ—Ç–æ—Ä–æ–π –æ—Ç–∫—Ä—ã—Ç PR)
          CURRENT_BRANCH="${{ github.event.pull_request.head.ref }}"
          log "PR –≤–µ—Ç–∫–∞: $CURRENT_BRANCH"

          # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä Issue –∏–∑ –∏–º–µ–Ω–∏ –≤–µ—Ç–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –≤–µ—Ç–∫–∞ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è feature-denisarger-66-test)
          ISSUE_NUMBER=$(echo "$CURRENT_BRANCH" | cut -d'-' -f3)
          if [ -z "$ISSUE_NUMBER" ]; then
            error_exit "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –∏–∑ –∏–º–µ–Ω–∏ –≤–µ—Ç–∫–∏!"
          fi
          log "–ò–∑–≤–ª–µ—á—ë–Ω ISSUE_NUMBER: $ISSUE_NUMBER"

          # –®–∞–≥ 1. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞ —á–µ—Ä–µ–∑ GraphQL-–∑–∞–ø—Ä–æ—Å
          GRAPHQL_QUERY=$(cat <<EOF
{
  "query": "query { node(id: \"$ID_PROJECT_SKILLDOR\") { ... on ProjectV2 { items(first: 100) { nodes { id content { ... on Issue { number title } } } } } } }"
}
EOF
          )
          log "üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GraphQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞..."
          RESPONSE=$(curl -s -X POST https://api.github.com/graphql \
            -H "Authorization: Bearer $TOKEN_AUTOMATIZATION" \
            -H "Content-Type: application/json" \
            -d "$GRAPHQL_QUERY") || error_exit "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ GraphQL-–∑–∞–ø—Ä–æ—Å–∞"
          if echo "$RESPONSE" | jq -e '.errors' >/dev/null; then
            error_exit "–ü–æ–ª—É—á–µ–Ω—ã –æ—à–∏–±–∫–∏ –æ—Ç GitHub API: $(echo "$RESPONSE" | jq '.errors')"
          fi
          log "‚úÖ –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã"

          # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —ç–ª–µ–º–µ–Ω—Ç–∞ (item ID), —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –Ω–æ–º–µ—Ä—É Issue
          ISSUE_ITEM_ID=$(echo "$RESPONSE" | jq -r ".data.node.items.nodes[] | select(.content.number == $ISSUE_NUMBER) | .id")
          if [ -z "$ISSUE_ITEM_ID" ] || [ "$ISSUE_ITEM_ID" == "null" ]; then
            error_exit "Issue —Å –Ω–æ–º–µ—Ä–æ–º $ISSUE_NUMBER –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø—Ä–æ–µ–∫—Ç–µ!"
          fi
          log "‚úÖ –ù–∞–π–¥–µ–Ω ISSUE_ITEM_ID: $ISSUE_ITEM_ID"

          # –®–∞–≥ 2. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ GraphQL-–º—É—Ç–∞—Ü–∏—é –Ω–∞ REVIEW
          GRAPHQL_MUTATION=$(cat <<EOF
{
  "query": "mutation { updateProjectV2ItemFieldValue(input: { projectId: \"$ID_PROJECT_SKILLDOR\", itemId: \"$ISSUE_ITEM_ID\", fieldId: \"$ID_COLUMN_STATUS_SKILLDOR\", value: { singleSelectOptionId: \"$ID_COLUMN_STATUS_REVIEW_SKILLDOR\" } }) { clientMutationId } }"
}
EOF
          )
          log "üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GraphQL-–º—É—Ç–∞—Ü–∏—é –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ –Ω–∞ REVIEW..."
          MUTATION_RESPONSE=$(curl -s -X POST https://api.github.com/graphql \
            -H "Authorization: Bearer $TOKEN_AUTOMATIZATION" \
            -H "Content-Type: application/json" \
            -d "$GRAPHQL_MUTATION") || error_exit "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ GraphQL-–º—É—Ç–∞—Ü–∏–∏"
          log "üîÑ –û—Ç–≤–µ—Ç GitHub API:"
          echo "$MUTATION_RESPONSE" | jq . | tee -a "$LOG_FILE"
          if echo "$MUTATION_RESPONSE" | jq -e '.errors' >/dev/null; then
            error_exit "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏: $(echo "$MUTATION_RESPONSE" | jq '.errors')"
          fi

          log "üéâ –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ $ISSUE_NUMBER —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ REVIEW"

      - name: Upload log file
        uses: actions/upload-artifact@v3
        with:
          name: pr-review-log
          path: pr_review.log
