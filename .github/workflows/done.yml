name: Move Issue to Done after close PR

on:
  pull_request:
    types: [closed]

jobs:
  update-status:
    runs-on: ubuntu-latest
    if: ${{ github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'develop' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up environment variables
        run: |
          echo "TOKEN_AUTOMATION=${{ secrets.TOKEN_AUTOMATION }}" >> $GITHUB_ENV
          echo "ID_PROJECT_SKILLDOR=${{ secrets.ID_PROJECT_SKILLDOR }}" >> $GITHUB_ENV
          echo "ID_COLUMN_STATUS=${{ secrets.ID_COLUMN_STATUS }}" >> $GITHUB_ENV
          echo "ID_COLUMN_STATUS_DONE=${{ secrets.ID_COLUMN_STATUS_DONE }}" >> $GITHUB_ENV
          echo "ID_COLUMN_STATUS_BLOCKED=${{ secrets.ID_COLUMN_STATUS_BLOCKED }}" >> $GITHUB_ENV
          echo "ID_COLUMN_STATUS_TODO=${{ secrets.ID_COLUMN_STATUS_TODO }}" >> $GITHUB_ENV
          echo "TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}" >> $GITHUB_ENV
          echo "TELEGRAM_CHAT_ID=${{ secrets.TELEGRAM_CHAT_ID }}" >> $GITHUB_ENV

      - name: Update task status to DONE
        run: |
          set -euo pipefail

          CURRENT_BRANCH="${{ github.event.pull_request.head.ref }}"
          ISSUE_NUMBER=$(echo "$CURRENT_BRANCH" | cut -d'-' -f3)

          if [ -z "$ISSUE_NUMBER" ]; then
            exit 1
          fi

          GRAPHQL_QUERY='{"query": "query { node(id: \"'"$ID_PROJECT_SKILLDOR"'\") { ... on ProjectV2 { items(first: 100) { nodes { id content { ... on Issue { number url } } } } } } }"}'
          RESPONSE=$(curl -s -X POST https://api.github.com/graphql \
            -H "Authorization: Bearer $TOKEN_AUTOMATION" \
            -H "Content-Type: application/json" \
            -d "$GRAPHQL_QUERY")

          ISSUE_ITEM_ID=$(echo "$RESPONSE" | jq -r ".data.node.items.nodes[] | select(.content.number == $ISSUE_NUMBER) | .id")
          ISSUE_URL=$(echo "$RESPONSE" | jq -r ".data.node.items.nodes[] | select(.content.number == $ISSUE_NUMBER) | .content.url")

          if [ -z "$ISSUE_ITEM_ID" ] || [ "$ISSUE_ITEM_ID" == "null" ]; then
            exit 1
          fi

          GRAPHQL_MUTATION='{"query": "mutation { updateProjectV2ItemFieldValue(input: { projectId: \"'"$ID_PROJECT_SKILLDOR"'\", itemId: \"'"$ISSUE_ITEM_ID"'\", fieldId: \"'"$ID_COLUMN_STATUS"'\", value: { singleSelectOptionId: \"'"$ID_COLUMN_STATUS_DONE"'\" } }) { clientMutationId } }"}'
          curl -s -X POST https://api.github.com/graphql \
            -H "Authorization: Bearer $TOKEN_AUTOMATION" \
            -H "Content-Type: application/json" \
            -d "$GRAPHQL_MUTATION"

          TELEGRAM_MESSAGE="âœ… Issue status updated to DONE.\n\nðŸ“Œ Issue Number: \`$ISSUE_NUMBER\`\nðŸ”— [Open Issue]($ISSUE_URL)"
          curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
            -H "Content-Type: application/json" \
            -d @- <<EOF
          {
              "chat_id": "$TELEGRAM_CHAT_ID",
              "text": "$TELEGRAM_MESSAGE",
              "parse_mode": "Markdown"
          }
          EOF

      - name: Process blocked tasks and update to TODO if unblocked
        run: |
          GRAPHQL_QUERY_BLOCKED='{"query": "query { node(id: \"'"$ID_PROJECT_SKILLDOR"'\") { ... on ProjectV2 { items(first: 100) { nodes { id content { ... on Issue { number url } } fieldValueByName(name: \"Status\") { ... on ProjectV2SingleSelectFieldValue { optionId } } } } } } }"}'
          RESPONSE_ALL=$(curl -s -X POST https://api.github.com/graphql \
            -H "Authorization: Bearer $TOKEN_AUTOMATION" \
            -H "Content-Type: application/json" \
            -d "$GRAPHQL_QUERY_BLOCKED")

          BLOCKED_ITEMS=$(echo "$RESPONSE_ALL" | jq -r '.data.node.items.nodes[] | select(.fieldValueByName.optionId == "'$ID_COLUMN_STATUS_BLOCKED'") | @base64')

          if [ -z "$BLOCKED_ITEMS" ]; then
            exit 0
          fi

          for item in $BLOCKED_ITEMS; do
            _jq() {
              echo ${item} | base64 --decode | jq -r ${1}
            }
            BLOCKED_ITEM_ID=$(_jq '.id')
            ISSUE_NUMBER_BLOCKED=$(_jq '.content.number')
            ISSUE_URL_BLOCKED=$(_jq '.content.url')

            GRAPHQL_MUTATION_TODO='{"query": "mutation { updateProjectV2ItemFieldValue(input: { projectId: \"'"$ID_PROJECT_SKILLDOR"'\", itemId: \"'"$BLOCKED_ITEM_ID"'\", fieldId: \"'"$ID_COLUMN_STATUS"'\", value: { singleSelectOptionId: \"'"$ID_COLUMN_STATUS_TODO"'\" } }) { clientMutationId } }"}'
            curl -s -X POST https://api.github.com/graphql \
              -H "Authorization: Bearer $TOKEN_AUTOMATION" \
              -H "Content-Type: application/json" \
              -d "$GRAPHQL_MUTATION_TODO"

            TELEGRAM_MESSAGE="âœ… Issue unblocked and moved to TODO.\n\nðŸ“Œ Issue Number: \`$ISSUE_NUMBER_BLOCKED\`\nðŸ”— [Open Issue]($ISSUE_URL_BLOCKED)"
            curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
              -H "Content-Type: application/json" \
              -d @- <<EOF
            {
              "chat_id": "$TELEGRAM_CHAT_ID",
              "text": "$TELEGRAM_MESSAGE",
              "parse_mode": "Markdown"
            }
            EOF
          done
