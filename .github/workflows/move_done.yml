name: Move Done + Message

on:
  pull_request:
    types: [closed]

jobs:
  update-status:
    runs-on: ubuntu-latest
    if: ${{ github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'develop' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up environment variables
        run: |
          echo "TOKEN_AUTOMATIZATION=${{ secrets.TOKEN_AUTOMATIZATION }}" >> $GITHUB_ENV
          echo "ID_PROJECT_SKILLDOR=${{ secrets.ID_PROJECT_SKILLDOR }}" >> $GITHUB_ENV
          echo "ID_COLUMN_STATUS_SKILLDOR=${{ secrets.ID_COLUMN_STATUS_SKILLDOR }}" >> $GITHUB_ENV
          echo "ID_COLUMN_STATUS_DONE_SKILLDOR=${{ secrets.ID_COLUMN_STATUS_DONE_SKILLDOR }}" >> $GITHUB_ENV
          echo "ID_COLUMN_STATUS_BLOCKED_SKILLDOR=${{ secrets.ID_COLUMN_STATUS_BLOCKED_SKILLDOR }}" >> $GITHUB_ENV
          echo "ID_COLUMN_STATUS_TO_DO_SKILLDOR=${{ secrets.ID_COLUMN_STATUS_TO_DO_SKILLDOR }}" >> $GITHUB_ENV
          echo "TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}" >> $GITHUB_ENV
          echo "TELEGRAM_CHAT_ID=${{ secrets.TELEGRAM_CHAT_ID }}" >> $GITHUB_ENV

      - name: Update task status to DONE
        run: |
          set -euo pipefail

          CURRENT_BRANCH="${{ github.event.pull_request.head.ref }}"
          ISSUE_NUMBER=$(echo "$CURRENT_BRANCH" | cut -d'-' -f3)
          if [ -z "$ISSUE_NUMBER" ]; then
            echo "Error: Could not extract issue number from branch name!"
            exit 1
          fi

          GRAPHQL_QUERY='{"query": "query { node(id: \"'"$ID_PROJECT_SKILLDOR"'\") { ... on ProjectV2 { items(first: 100) { nodes { id content { ... on Issue { number title url } } } } } } }"}'
          RESPONSE=$(curl -s -X POST https://api.github.com/graphql \
            -H "Authorization: Bearer $TOKEN_AUTOMATIZATION" \
            -H "Content-Type: application/json" \
            -d "$GRAPHQL_QUERY") || { echo "Error: Failed to execute GraphQL query"; exit 1; }

          ISSUE_ITEM_ID=$(echo "$RESPONSE" | jq -r ".data.node.items.nodes[] | select(.content.number == $ISSUE_NUMBER) | .id")
          ISSUE_URL=$(echo "$RESPONSE" | jq -r ".data.node.items.nodes[] | select(.content.number == $ISSUE_NUMBER) | .content.url")
          if [ -z "$ISSUE_ITEM_ID" ] || [ "$ISSUE_ITEM_ID" == "null" ]; then
            echo "Error: Issue with number $ISSUE_NUMBER not found in project!"
            exit 1
          fi

          GRAPHQL_MUTATION='{"query": "mutation { updateProjectV2ItemFieldValue(input: { projectId: \"'"$ID_PROJECT_SKILLDOR"'\", itemId: \"'"$ISSUE_ITEM_ID"'\", fieldId: \"'"$ID_COLUMN_STATUS_SKILLDOR"'\", value: { singleSelectOptionId: \"'"$ID_COLUMN_STATUS_DONE_SKILLDOR"'\" } }) { clientMutationId } }"}'
          MUTATION_RESPONSE=$(curl -s -X POST https://api.github.com/graphql \
            -H "Authorization: Bearer $TOKEN_AUTOMATIZATION" \
            -H "Content-Type: application/json" \
            -d "$GRAPHQL_MUTATION") || { echo "Error: Failed to execute GraphQL mutation"; exit 1; }

          if echo "$MUTATION_RESPONSE" | jq -e '.errors' >/dev/null; then
            echo "Error: Failed to update issue status: $(echo "$MUTATION_RESPONSE" | jq '.errors')"
            exit 1
          fi

          TELEGRAM_MESSAGE="✅ Issue status updated to DONE.\n\n📌 Issue Number: \`$ISSUE_NUMBER\`\n🔗 [Open Issue]($ISSUE_URL)"
          curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
            -H "Content-Type: application/json" \
            -d @- <<EOF
          {
            "chat_id": "$TELEGRAM_CHAT_ID",
            "text": "$TELEGRAM_MESSAGE",
            "parse_mode": "Markdown",
            "message_thread_id": ${{ secrets.TELEGRAM_TOPIC_ID }}
          }
          EOF

      - name: Process blocked tasks and update to TODO if unblocked
        run: |
          GRAPHQL_QUERY_BLOCKED='{"query": "query { node(id: \"'"$ID_PROJECT_SKILLDOR"'\") { ... on ProjectV2 { items(first: 100) { nodes { id content { ... on Issue { number title body url } } fieldValueByName(name: \"Status\") { ... on ProjectV2SingleSelectFieldValue { optionId name } } } } } } }"}'
          RESPONSE_ALL=$(curl -s -X POST https://api.github.com/graphql \
            -H "Authorization: Bearer $TOKEN_AUTOMATIZATION" \
            -H "Content-Type: application/json" \
            -d "$GRAPHQL_QUERY_BLOCKED")
          
          NODES=$(echo "$RESPONSE_ALL" | jq -r ".data.node.items.nodes")
          if [ "$NODES" = "null" ]; then
            echo "No project items found, skipping further processing."
            exit 0
          fi  

          BLOCKED_ITEMS=$(echo "$RESPONSE_ALL" | jq -r '.data.node.items.nodes[] | select(.fieldValueByName.optionId == "'$ID_COLUMN_STATUS_BLOCKED_SKILLDOR'") | @base64')
          if [ -z "$BLOCKED_ITEMS" ]; then
            TELEGRAM_MESSAGE="ℹ️ No blocked issues in the project"
            curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
              -H "Content-Type: application/json" \
              -d @- <<EOF
          {
            "chat_id": "$TELEGRAM_CHAT_ID",
            "text": "$TELEGRAM_MESSAGE",
            "parse_mode": "Markdown",
            "message_thread_id": ${{ secrets.TELEGRAM_TOPIC_ID }}
          }
          EOF
            exit 0
          fi

          for item in $BLOCKED_ITEMS; do
            _jq() {
              echo ${item} | base64 --decode | jq -r ${1}
            }
            BLOCKED_ITEM_ID=$(_jq '.id')
            ISSUE_NUMBER_BLOCKED=$(_jq '.content.number')
            ISSUE_URL_BLOCKED=$(_jq '.content.url')

            GRAPHQL_MUTATION_TODO='{"query": "mutation { updateProjectV2ItemFieldValue(input: { projectId: \"'"$ID_PROJECT_SKILLDOR"'\", itemId: \"'"$BLOCKED_ITEM_ID"'\", fieldId: \"'"$ID_COLUMN_STATUS_SKILLDOR"'\", value: { singleSelectOptionId: \"'"$ID_COLUMN_STATUS_TO_DO_SKILLDOR"'\" } }) { clientMutationId } }"}'
            MUTATION_TODO_RESPONSE=$(curl -s -X POST https://api.github.com/graphql \
              -H "Authorization: Bearer $TOKEN_AUTOMATIZATION" \
              -H "Content-Type: application/json" \
              -d "$GRAPHQL_MUTATION_TODO")
            
            TELEGRAM_MESSAGE="✅ Issue unblocked and moved to TODO.\n\n📌 Issue Number: \`$ISSUE_NUMBER_BLOCKED\`\n🔗 [Open Issue]($ISSUE_URL_BLOCKED)"
            curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
              -H "Content-Type: application/json" \
              -d @- <<EOF
          {   
            "chat_id": "$TELEGRAM_CHAT_ID",
            "text": "$TELEGRAM_MESSAGE",
            "parse_mode": "Markdown",
            "message_thread_id": ${{ secrets.TELEGRAM_TOPIC_ID }}
          }
            EOF
          done
